A linked list is a data structure where each element of the list, called a node, holds data and a pointer to the next node in the list. Linked lists are dynamic and thus are useful when dealing with an unknown number of objects. Inserting and deleting elements from a linked list are very efficient, but linked lists do not allow random access of elements contained within them. To get to a certain index of a linked list, you have to walk along the linked list until you get to that element.

A stack is a data structure that allows you to add and remove from it in a specific way. It follows the principle of Last In First Out (LIFO). The last element you added to the stack is the first element that you remove from the stack. Adding to the stack is called pushing, and removing from the stack is called popping. Stacks are not dynamic and have a predefined amount of space they take up. Stacks are used to implement recursion in programming languages, and the back/forward buttons on most browsers.

A hash map is a data structure that is used to hold data by mapping a key to an associated value. Hash maps are useful when you need to quickly look up the value for a given key. Lookups and insertions can all be done in constant time on average. The backend implementation of a hash map is an array. Hash maps work by using a special function, called a hash function, to convert keys into an index of that backend array. 

A tree is a data structure that is composed of nodes and edges that connect those nodes. They organize data in a vertical or hierarchical way. Each node, like the nodes in linked lists, hold a value or data point as well as pointers to its child nodes. Child nodes are nodes that are connected to the node but are below them in the tree. The nodes connected above the child nodes are called parent nodes. The first node of the tree is called the root.

A heap is a special type of tree that has specific rules for the parent-child node relationship. In a min heap, the parent node must be smaller than or equal to all of its children. In a max heap, the parent node must be greater than or equal to all of its children. Heaps are used to implement a 'priority queue' which is a data structure where each element has a priority associated with it. The heap rules ensure that the root of the heap is always the smallest or largest element, and therefore you can always remove the smallest or largest element quickly.  
